{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MAICOL/Documents/GitHub/datasoft/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class UrbanService {\n  constructor(http) {\n    this.http = http;\n    this.Url = 'http://localhost:3000';\n  }\n\n  extractData(res) {\n    let body = JSON.parse('' + res);\n    return body || {};\n  }\n\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  } // --Servicios de CATALOGOS-- //\n  //--------------------------------------------------------------------------------------\n  // Metodo listar catalogos\n\n\n  getCatalogo() {\n    return this.http.get(this.Url + \"/catalogos\", httpOptions);\n  } //--------------------------------------------------------------------------------------\n  // Metodo mostrar catalogos llave\n\n\n  getCatalogos(id) {\n    return this.http.get(this.Url + \"/catalogos\" + id, httpOptions);\n  } //--------------------------------------------------------------------------------------\n  // Metodo mostrar catalogos id\n\n\n  getCatalogosId(id) {\n    return this.http.get(this.Url + \"/catalogos/catalo\" + id, httpOptions);\n  } //--------------------------------------------------------------------------------------\n  // Metodo crear catalogo\n\n\n  insertCat(nuevoCat) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, rejects) => {\n        _this.http.post(_this.Url + \"/catalogos\", nuevoCat, httpOptions).toPromise();\n      });\n    })();\n  } //--------------------------------------------------------------------------------------\n  // Metodo modificar catalogo\n\n\n  updateCat(cadena) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this2.http.put(_this2.Url + \"/catalogos\", cadena, httpOptions).toPromise();\n      });\n    })();\n  } //---------------------------------------------------------------------------------------------------\n  // --Servicios de CONTACTOS-- //\n  //--------------------------------------------------------------------------------------\n  // Metodo listar contacto\n\n\n  getContactos() {\n    return this.http.get(this.Url + \"/contactos\", httpOptions);\n  } //--------------------------------------------------------------------------------------\n  // Metodo mostrar contactos por id\n\n\n  getContacto(id) {\n    return this.http.get(this.Url + \"/contactos\" + id, httpOptions);\n  } //--------------------------------------------------------------------------------------\n  // Metodo mostrar contactos por idEncargado\n\n\n  getContactoEncargado(id) {\n    return this.http.get(this.Url + \"/contactos/encargado\" + id, httpOptions);\n  } //--------------------------------------------------------------------------------------\n  // Metodo crear contacto\n\n\n  insertContacto(nuevoContacto) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, rejects) => {\n        _this3.http.post(_this3.Url + \"/contactos\", nuevoContacto, httpOptions).toPromise();\n      });\n    })();\n  } //--------------------------------------------------------------------------------------\n  // Metodo mostrar contacto front-end\n\n\n  getContactoFront(id) {\n    return this.http.get(this.Url + \"/contactos/contac\" + id, httpOptions);\n  } //--------------------------------------------------------------------------------------\n  // Metodo modificar contacto\n\n\n  updateContacto(cadena) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this4.http.put(_this4.Url + \"/contactos\", cadena, httpOptions).toPromise();\n      });\n    })();\n  } //--------------------------------------------------------------------------------------\n\n  /*\r\n      Metodo listar encargados\r\n  */\n\n\n  getEncargados() {\n    return this.http.get(this.Url + '/encargados', httpOptions);\n  }\n  /*Servicio CRUD PRODUCTO */\n\n  /*Metodo listar productos */\n\n\n  getProducto() {\n    return this.http.get(this.Url + '/productos', httpOptions);\n  }\n  /*Método mostrar un solo prodcto */\n\n\n  getProductos(id) {\n    return this.http.get(this.Url + '/productos' + id, httpOptions);\n  }\n  /*Método para insertar un nuevo producto */\n\n\n  insertProducto(productoData) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this5.http.post(_this5.Url + '/productos', productoData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*Método para modificar un producto */\n\n\n  updateProducto(productoData) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this6.http.put(_this6.Url + '/productos', productoData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*Servicio CRUD  MATERIALES */\n\n  /*Método Listar de los Tipos de materiales */\n\n\n  getMaterial() {\n    return this.http.get(this.Url + '/materiales', httpOptions);\n  }\n  /*Método mostrar un solo material */\n\n\n  getMateriales(id) {\n    return this.http.get(this.Url + '/materiales' + id, httpOptions);\n  }\n  /*Método para insertar un nuevo material */\n\n\n  insertMaterial(materialData) {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this7.http.post(_this7.Url + '/materiales', materialData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*Método para modificar un material */\n\n\n  updateMaterial(materialData) {\n    var _this8 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this8.http.put(_this8.Url + '/materiales', materialData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /******************************************/\n\n  /** SERVICIO CRUD DE TIPOS DE PRODUCCION **/\n\n  /******************************************/\n\n  /*\r\n    Metodo listar produccion\r\n    */\n\n\n  getProduccion() {\n    return this.http.get(this.Url + '/produccion', httpOptions);\n  }\n  /*\r\n    Metodo mostrar produccion\r\n    */\n\n\n  getTipoProduccion(id) {\n    return this.http.get(this.Url + '/produccion' + id, httpOptions);\n  }\n  /*\r\n    Metodo insertar produccion\r\n    */\n\n\n  insertProduccion(produccionData) {\n    var _this9 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this9.http.post(_this9.Url + '/produccion', produccionData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*\r\n    Metodo Modoficar produccion\r\n    */\n\n\n  updateProduccion(produccionData) {\n    var _this10 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this10.http.put(_this10.Url + '/produccion', produccionData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*\r\n    Metodo mostrar informe produccion\r\n    */\n\n\n  getInforme(id, fechaIn, fechaFi) {\n    return this.http.get(this.Url + '/produccion/' + id + '/' + fechaIn + '/' + fechaFi + httpOptions);\n  }\n\n}\n\nUrbanService.ɵfac = function UrbanService_Factory(t) {\n  return new (t || UrbanService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUrbanService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UrbanService,\n  factory: UrbanService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/MAICOL/Documents/GitHub/datasoft/Frontend/src/app/Urban.service.ts"],"names":["HttpHeaders","of","i0","i1","httpOptions","headers","UrbanService","constructor","http","Url","extractData","res","body","JSON","parse","handleError","operation","result","error","console","log","message","getCatalogo","get","getCatalogos","id","getCatalogosId","insertCat","nuevoCat","Promise","resolve","rejects","post","toPromise","updateCat","cadena","reject","put","getContactos","getContacto","getContactoEncargado","insertContacto","nuevoContacto","getContactoFront","updateContacto","getEncargados","getProducto","getProductos","insertProducto","productoData","updateProducto","getMaterial","getMateriales","insertMaterial","materialData","updateMaterial","getProduccion","getTipoProduccion","insertProduccion","produccionData","updateProduccion","getInforme","fechaIn","fechaFi","ɵfac","UrbanService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders, } from '@angular/common/http';\r\nimport { of } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' }),\r\n};\r\nexport class UrbanService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.Url = 'http://localhost:3000';\r\n    }\r\n    extractData(res) {\r\n        let body = JSON.parse('' + res);\r\n        return body || {};\r\n    }\r\n    handleError(operation = 'operation', result) {\r\n        return (error) => {\r\n            console.log(`${operation} failed: ${error.message}`);\r\n            return of(result);\r\n        };\r\n    }\r\n    // --Servicios de CATALOGOS-- //\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo listar catalogos\r\n    getCatalogo() {\r\n        return this.http.get(this.Url + \"/catalogos\", httpOptions);\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo mostrar catalogos llave\r\n    getCatalogos(id) {\r\n        return this.http.get(this.Url + \"/catalogos\" + id, httpOptions);\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo mostrar catalogos id\r\n    getCatalogosId(id) {\r\n        return this.http.get(this.Url + \"/catalogos/catalo\" + id, httpOptions);\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo crear catalogo\r\n    async insertCat(nuevoCat) {\r\n        return new Promise((resolve, rejects) => {\r\n            this.http.post(this.Url + \"/catalogos\", nuevoCat, httpOptions).toPromise();\r\n        });\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo modificar catalogo\r\n    async updateCat(cadena) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.put(this.Url + \"/catalogos\", cadena, httpOptions).toPromise();\r\n        });\r\n    }\r\n    //---------------------------------------------------------------------------------------------------\r\n    // --Servicios de CONTACTOS-- //\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo listar contacto\r\n    getContactos() {\r\n        return this.http.get(this.Url + \"/contactos\", httpOptions);\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo mostrar contactos por id\r\n    getContacto(id) {\r\n        return this.http.get(this.Url + \"/contactos\" + id, httpOptions);\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo mostrar contactos por idEncargado\r\n    getContactoEncargado(id) {\r\n        return this.http.get(this.Url + \"/contactos/encargado\" + id, httpOptions);\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo crear contacto\r\n    async insertContacto(nuevoContacto) {\r\n        return new Promise((resolve, rejects) => {\r\n            this.http.post(this.Url + \"/contactos\", nuevoContacto, httpOptions).toPromise();\r\n        });\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo mostrar contacto front-end\r\n    getContactoFront(id) {\r\n        return this.http.get(this.Url + \"/contactos/contac\" + id, httpOptions);\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    // Metodo modificar contacto\r\n    async updateContacto(cadena) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.put(this.Url + \"/contactos\", cadena, httpOptions).toPromise();\r\n        });\r\n    }\r\n    //--------------------------------------------------------------------------------------\r\n    /*\r\n        Metodo listar encargados\r\n    */\r\n    getEncargados() {\r\n        return this.http.get(this.Url + '/encargados', httpOptions);\r\n    }\r\n    /*Servicio CRUD PRODUCTO */\r\n    /*Metodo listar productos */\r\n    getProducto() {\r\n        return this.http.get(this.Url + '/productos', httpOptions);\r\n    }\r\n    /*Método mostrar un solo prodcto */\r\n    getProductos(id) {\r\n        return this.http.get(this.Url + '/productos' + id, httpOptions);\r\n    }\r\n    /*Método para insertar un nuevo producto */\r\n    async insertProducto(productoData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http\r\n                .post(this.Url + '/productos', productoData, httpOptions)\r\n                .toPromise();\r\n        });\r\n    }\r\n    /*Método para modificar un producto */\r\n    async updateProducto(productoData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http\r\n                .put(this.Url + '/productos', productoData, httpOptions)\r\n                .toPromise();\r\n        });\r\n    }\r\n    /*Servicio CRUD  MATERIALES */\r\n    /*Método Listar de los Tipos de materiales */\r\n    getMaterial() {\r\n        return this.http.get(this.Url + '/materiales', httpOptions);\r\n    }\r\n    /*Método mostrar un solo material */\r\n    getMateriales(id) {\r\n        return this.http.get(this.Url + '/materiales' + id, httpOptions);\r\n    }\r\n    /*Método para insertar un nuevo material */\r\n    async insertMaterial(materialData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http\r\n                .post(this.Url + '/materiales', materialData, httpOptions)\r\n                .toPromise();\r\n        });\r\n    }\r\n    /*Método para modificar un material */\r\n    async updateMaterial(materialData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http\r\n                .put(this.Url + '/materiales', materialData, httpOptions)\r\n                .toPromise();\r\n        });\r\n    }\r\n    /******************************************/\r\n    /** SERVICIO CRUD DE TIPOS DE PRODUCCION **/\r\n    /******************************************/\r\n    /*\r\n      Metodo listar produccion\r\n      */\r\n    getProduccion() {\r\n        return this.http.get(this.Url + '/produccion', httpOptions);\r\n    }\r\n    /*\r\n      Metodo mostrar produccion\r\n      */\r\n    getTipoProduccion(id) {\r\n        return this.http.get(this.Url + '/produccion' + id, httpOptions);\r\n    }\r\n    /*\r\n      Metodo insertar produccion\r\n      */\r\n    async insertProduccion(produccionData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http\r\n                .post(this.Url + '/produccion', produccionData, httpOptions)\r\n                .toPromise();\r\n        });\r\n    }\r\n    /*\r\n      Metodo Modoficar produccion\r\n      */\r\n    async updateProduccion(produccionData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http\r\n                .put(this.Url + '/produccion', produccionData, httpOptions)\r\n                .toPromise();\r\n        });\r\n    }\r\n    /*\r\n      Metodo mostrar informe produccion\r\n      */\r\n    getInforme(id, fechaIn, fechaFi) {\r\n        return this.http.get(this.Url +\r\n            '/produccion/' +\r\n            id +\r\n            '/' +\r\n            fechaIn +\r\n            '/' +\r\n            fechaFi +\r\n            httpOptions);\r\n    }\r\n}\r\nUrbanService.ɵfac = function UrbanService_Factory(t) { return new (t || UrbanService)(i0.ɵɵinject(i1.HttpClient)); };\r\nUrbanService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UrbanService, factory: UrbanService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}