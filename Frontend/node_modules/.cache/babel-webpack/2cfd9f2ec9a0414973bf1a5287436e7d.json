{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/CAROLINA/Documents/GitHub/datasoft/Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class UrbanService {\n  constructor(http) {\n    this.http = http;\n    this.Url = 'http://localhost:3000';\n  }\n\n  extractData(res) {\n    let body = JSON.parse('' + res);\n    return body || {};\n  }\n\n  handleError(operation = 'operation', result) {\n    return error => {\n      console.log(`${operation} failed: ${error.message}`);\n      return of(result);\n    };\n  }\n  /*Servicio CRUD PRODUCTO */\n\n  /*Metodo listar productos */\n\n\n  getProducto() {\n    return this.http.get(this.Url + \"/productos\", httpOptions);\n  }\n  /*Método mostrar un solo prodcto */\n\n\n  getProductos(id) {\n    return this.http.get(this.Url + \"/productos\" + id, httpOptions);\n  }\n  /*Método para insertar un nuevo producto */\n\n\n  insertProducto(productoData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this.http.post(_this.Url + \"/productos\", productoData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*Método para modificar un producto */\n\n\n  updateProducto(productoData) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this2.http.put(_this2.Url + \"/productos\", productoData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*Servicio CRUD  MATERIALES */\n\n  /*Método Listar de los Tipos de materiales */\n\n\n  getMaterial() {\n    return this.http.get(this.Url + \"/materiales\", httpOptions);\n  }\n  /*Método mostrar un solo material */\n\n\n  getMateriales(id) {\n    return this.http.get(this.Url + \"/materiales\" + id, httpOptions);\n  }\n  /*Método para insertar un nuevo material */\n\n\n  insertMaterial(materialData) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this3.http.post(_this3.Url + \"/materiales\", materialData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*Método para modificar un material */\n\n\n  updateMaterial(materialData) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this4.http.put(_this4.Url + \"/materiales\", materialData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /******************************************/\n\n  /** SERVICIO CRUD DE TIPOS DE PRODUCCION **/\n\n  /******************************************/\n\n  /*\r\n  Metodo listar produccion\r\n  */\n\n\n  getProduccion() {\n    return this.http.get(this.Url + \"/produccion\", httpOptions);\n  }\n  /*\r\n  Metodo mostrar produccion\r\n  */\n\n\n  getTipoProduccion(id) {\n    return this.http.get(this.Url + \"/produccion\" + id, httpOptions);\n  }\n  /*\r\n  Metodo insertar produccion\r\n  */\n\n\n  insertProduccion(produccionData) {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this5.http.post(_this5.Url + \"/produccion\", produccionData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*\r\n  Metodo Modoficar produccion\r\n  */\n\n\n  updateProduccion(produccionData) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      return new Promise((resolve, reject) => {\n        _this6.http.put(_this6.Url + \"/produccion\", produccionData, httpOptions).toPromise();\n      });\n    })();\n  }\n  /*\r\n  Metodo mostrar informe produccion\r\n  */\n\n\n  getInforme(id, fechaIn, fechaFi) {\n    return this.http.get(this.Url + \"/produccion/\" + id + \"/\" + fechaIn + \"/\" + fechaFi + httpOptions);\n  }\n\n}\n\nUrbanService.ɵfac = function UrbanService_Factory(t) {\n  return new (t || UrbanService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUrbanService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UrbanService,\n  factory: UrbanService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/CAROLINA/Documents/GitHub/datasoft/Frontend/src/app/Urban.service.ts"],"names":["HttpHeaders","of","i0","i1","httpOptions","headers","UrbanService","constructor","http","Url","extractData","res","body","JSON","parse","handleError","operation","result","error","console","log","message","getProducto","get","getProductos","id","insertProducto","productoData","Promise","resolve","reject","post","toPromise","updateProducto","put","getMaterial","getMateriales","insertMaterial","materialData","updateMaterial","getProduccion","getTipoProduccion","insertProduccion","produccionData","updateProduccion","getInforme","fechaIn","fechaFi","ɵfac","UrbanService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,WAAT,QAA4B,sBAA5B;AACA,SAASC,EAAT,QAAmB,MAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,MAAMC,WAAW,GAAG;AAChBC,EAAAA,OAAO,EAAE,IAAIL,WAAJ,CAAgB;AAAE,oBAAgB;AAAlB,GAAhB;AADO,CAApB;AAGA,OAAO,MAAMM,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAW,uBAAX;AACH;;AACDC,EAAAA,WAAW,CAACC,GAAD,EAAM;AACb,QAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKH,GAAhB,CAAX;AACA,WAAOC,IAAI,IAAI,EAAf;AACH;;AACDG,EAAAA,WAAW,CAACC,SAAS,GAAG,WAAb,EAA0BC,MAA1B,EAAkC;AACzC,WAAQC,KAAD,IAAW;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAa,GAAEJ,SAAU,YAAWE,KAAK,CAACG,OAAQ,EAAlD;AACA,aAAOpB,EAAE,CAACgB,MAAD,CAAT;AACH,KAHD;AAIH;AACD;;AACA;;;AACAK,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKd,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,YAAzB,EAAuCL,WAAvC,CAAP;AACH;AACD;;;AACAoB,EAAAA,YAAY,CAACC,EAAD,EAAK;AACb,WAAO,KAAKjB,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,YAAX,GAA0BgB,EAAxC,EAA4CrB,WAA5C,CAAP;AACH;AACD;;;AACMsB,EAAAA,cAAc,CAACC,YAAD,EAAe;AAAA;;AAAA;AAC/B,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAA,KAAI,CAACtB,IAAL,CAAUuB,IAAV,CAAe,KAAI,CAACtB,GAAL,GAAW,YAA1B,EAAwCkB,YAAxC,EAAsDvB,WAAtD,EAAmE4B,SAAnE;AACH,OAFM,CAAP;AAD+B;AAIlC;AACD;;;AACMC,EAAAA,cAAc,CAACN,YAAD,EAAe;AAAA;;AAAA;AAC/B,aAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAA,MAAI,CAACtB,IAAL,CAAU0B,GAAV,CAAc,MAAI,CAACzB,GAAL,GAAW,YAAzB,EAAuCkB,YAAvC,EAAqDvB,WAArD,EAAkE4B,SAAlE;AACH,OAFM,CAAP;AAD+B;AAIlC;AACD;;AACA;;;AACAG,EAAAA,WAAW,GAAG;AACV,WAAO,KAAK3B,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,aAAzB,EAAwCL,WAAxC,CAAP;AACH;AACD;;;AACAgC,EAAAA,aAAa,CAACX,EAAD,EAAK;AACd,WAAO,KAAKjB,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,aAAX,GAA2BgB,EAAzC,EAA6CrB,WAA7C,CAAP;AACH;AACD;;;AACMiC,EAAAA,cAAc,CAACC,YAAD,EAAe;AAAA;;AAAA;AAC/B,aAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAA,MAAI,CAACtB,IAAL,CAAUuB,IAAV,CAAe,MAAI,CAACtB,GAAL,GAAW,aAA1B,EAAyC6B,YAAzC,EAAuDlC,WAAvD,EAAoE4B,SAApE;AACH,OAFM,CAAP;AAD+B;AAIlC;AACD;;;AACMO,EAAAA,cAAc,CAACD,YAAD,EAAe;AAAA;;AAAA;AAC/B,aAAO,IAAIV,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAA,MAAI,CAACtB,IAAL,CAAU0B,GAAV,CAAc,MAAI,CAACzB,GAAL,GAAW,aAAzB,EAAwC6B,YAAxC,EAAsDlC,WAAtD,EAAmE4B,SAAnE;AACH,OAFM,CAAP;AAD+B;AAIlC;AACD;;AACA;;AACA;;AACA;AACJ;AACA;;;AACIQ,EAAAA,aAAa,GAAG;AACZ,WAAO,KAAKhC,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,aAAzB,EAAwCL,WAAxC,CAAP;AACH;AACD;AACJ;AACA;;;AACIqC,EAAAA,iBAAiB,CAAChB,EAAD,EAAK;AAClB,WAAO,KAAKjB,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,aAAX,GAA2BgB,EAAzC,EAA6CrB,WAA7C,CAAP;AACH;AACD;AACJ;AACA;;;AACUsC,EAAAA,gBAAgB,CAACC,cAAD,EAAiB;AAAA;;AAAA;AACnC,aAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAA,MAAI,CAACtB,IAAL,CAAUuB,IAAV,CAAe,MAAI,CAACtB,GAAL,GAAW,aAA1B,EAAyCkC,cAAzC,EAAyDvC,WAAzD,EAAsE4B,SAAtE;AACH,OAFM,CAAP;AADmC;AAItC;AACD;AACJ;AACA;;;AACUY,EAAAA,gBAAgB,CAACD,cAAD,EAAiB;AAAA;;AAAA;AACnC,aAAO,IAAIf,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpC,QAAA,MAAI,CAACtB,IAAL,CAAU0B,GAAV,CAAc,MAAI,CAACzB,GAAL,GAAW,aAAzB,EAAwCkC,cAAxC,EAAwDvC,WAAxD,EAAqE4B,SAArE;AACH,OAFM,CAAP;AADmC;AAItC;AACD;AACJ;AACA;;;AACIa,EAAAA,UAAU,CAACpB,EAAD,EAAKqB,OAAL,EAAcC,OAAd,EAAuB;AAC7B,WAAO,KAAKvC,IAAL,CAAUe,GAAV,CAAc,KAAKd,GAAL,GAAW,cAAX,GAA4BgB,EAA5B,GAAiC,GAAjC,GAAuCqB,OAAvC,GAAiD,GAAjD,GAAuDC,OAAvD,GAAiE3C,WAA/E,CAAP;AACH;;AA7FqB;;AA+F1BE,YAAY,CAAC0C,IAAb,GAAoB,SAASC,oBAAT,CAA8BC,CAA9B,EAAiC;AAAE,SAAO,KAAKA,CAAC,IAAI5C,YAAV,EAAwBJ,EAAE,CAACiD,QAAH,CAAYhD,EAAE,CAACiD,UAAf,CAAxB,CAAP;AAA6D,CAApH;;AACA9C,YAAY,CAAC+C,KAAb,GAAqB,aAAcnD,EAAE,CAACoD,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEjD,YAAT;AAAuBkD,EAAAA,OAAO,EAAElD,YAAY,CAAC0C,IAA7C;AAAmDS,EAAAA,UAAU,EAAE;AAA/D,CAAtB,CAAnC","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport { of } from 'rxjs';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nconst httpOptions = {\r\n    headers: new HttpHeaders({ 'Content-Type': 'application/json' })\r\n};\r\nexport class UrbanService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.Url = 'http://localhost:3000';\r\n    }\r\n    extractData(res) {\r\n        let body = JSON.parse('' + res);\r\n        return body || {};\r\n    }\r\n    handleError(operation = 'operation', result) {\r\n        return (error) => {\r\n            console.log(`${operation} failed: ${error.message}`);\r\n            return of(result);\r\n        };\r\n    }\r\n    /*Servicio CRUD PRODUCTO */\r\n    /*Metodo listar productos */\r\n    getProducto() {\r\n        return this.http.get(this.Url + \"/productos\", httpOptions);\r\n    }\r\n    /*Método mostrar un solo prodcto */\r\n    getProductos(id) {\r\n        return this.http.get(this.Url + \"/productos\" + id, httpOptions);\r\n    }\r\n    /*Método para insertar un nuevo producto */\r\n    async insertProducto(productoData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.post(this.Url + \"/productos\", productoData, httpOptions).toPromise();\r\n        });\r\n    }\r\n    /*Método para modificar un producto */\r\n    async updateProducto(productoData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.put(this.Url + \"/productos\", productoData, httpOptions).toPromise();\r\n        });\r\n    }\r\n    /*Servicio CRUD  MATERIALES */\r\n    /*Método Listar de los Tipos de materiales */\r\n    getMaterial() {\r\n        return this.http.get(this.Url + \"/materiales\", httpOptions);\r\n    }\r\n    /*Método mostrar un solo material */\r\n    getMateriales(id) {\r\n        return this.http.get(this.Url + \"/materiales\" + id, httpOptions);\r\n    }\r\n    /*Método para insertar un nuevo material */\r\n    async insertMaterial(materialData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.post(this.Url + \"/materiales\", materialData, httpOptions).toPromise();\r\n        });\r\n    }\r\n    /*Método para modificar un material */\r\n    async updateMaterial(materialData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.put(this.Url + \"/materiales\", materialData, httpOptions).toPromise();\r\n        });\r\n    }\r\n    /******************************************/\r\n    /** SERVICIO CRUD DE TIPOS DE PRODUCCION **/\r\n    /******************************************/\r\n    /*\r\n    Metodo listar produccion\r\n    */\r\n    getProduccion() {\r\n        return this.http.get(this.Url + \"/produccion\", httpOptions);\r\n    }\r\n    /*\r\n    Metodo mostrar produccion\r\n    */\r\n    getTipoProduccion(id) {\r\n        return this.http.get(this.Url + \"/produccion\" + id, httpOptions);\r\n    }\r\n    /*\r\n    Metodo insertar produccion\r\n    */\r\n    async insertProduccion(produccionData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.post(this.Url + \"/produccion\", produccionData, httpOptions).toPromise();\r\n        });\r\n    }\r\n    /*\r\n    Metodo Modoficar produccion\r\n    */\r\n    async updateProduccion(produccionData) {\r\n        return new Promise((resolve, reject) => {\r\n            this.http.put(this.Url + \"/produccion\", produccionData, httpOptions).toPromise();\r\n        });\r\n    }\r\n    /*\r\n    Metodo mostrar informe produccion\r\n    */\r\n    getInforme(id, fechaIn, fechaFi) {\r\n        return this.http.get(this.Url + \"/produccion/\" + id + \"/\" + fechaIn + \"/\" + fechaFi + httpOptions);\r\n    }\r\n}\r\nUrbanService.ɵfac = function UrbanService_Factory(t) { return new (t || UrbanService)(i0.ɵɵinject(i1.HttpClient)); };\r\nUrbanService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UrbanService, factory: UrbanService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}